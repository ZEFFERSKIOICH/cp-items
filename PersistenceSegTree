//using namespace PersistenceSegTree ,0 based indexing,vector<Vertex*> roots;
namespace PersistenceSegTree{
	struct Vertex{
		Vertex *l,*r;
		lli sum;
		Vertex(lli val):sum(val),l(nullptr),r(nullptr){}
		Vertex(Vertex *l,Vertex *r):l(l),r(r),sum(0){
			if(l) sum+=l->sum;
			if(r) sum+=r->sum;
		}
	};
	Vertex* build(int l,int r){
		if(l==r){return new Vertex(v[l]);}
		midi;
		return new Vertex(build(l,mid),build(mid+1,r));
	}
	lli query(Vertex *v,int l,int r,int ql,int qr){
		if(l>qr || r<ql) return 0;
		if(l>=ql && r<=qr) return v->sum;
		midi;
		return query(v->l,l,mid,ql,qr)+query(v->r,mid+1,r,ql,qr);
	}
	Vertex* update(Vertex *v,int l,int r,int qpos,lli val){
		if(l==r){return new Vertex(val);}
		midi;
		if(qpos<=mid)	return new Vertex(update(v->l,l,mid,qpos,val),v->r);
		else	return new Vertex(v->l,update(v->r,mid+1,r,qpos,val));
	}
}

