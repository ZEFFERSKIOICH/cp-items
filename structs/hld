struct SegTree{
	vector<lli> seg;int n;
	SegTree(int n,vector<lli> &v):n(n)
	{
		seg=vector<lli> (2*n,0);
		forr(i,0,n) seg[i+n]=v[i];	for(int i=n-1;i>0;i--) seg[i]=seg[i<<1]+seg[i<<1|1];
	}
	inline void update(int pos,lli val){pos+=n;seg[pos]=val;for(int i=pos;i>1;i=i>>1) seg[i>>1]=seg[i]+seg[i^1];}

	inline lli query(int l,int r){l+=n;r+=n;lli sum=0;
		while(l<=r)
		{
			if(l&1) sum+=seg[l++];if(!(r&1)) sum+=seg[r--];l=l>>1;r=r>>1;
		}
		return sum;
	}
};

struct HLD{
	int n,gpos=0;vector<int> pos,depth,ss,head,heavy,par;vector<vector<int>> edge;
	HLD(int n,vector<vector<int>> &edge):n(n),edge(edge){par=pos=depth=head=heavy=ss=vector<int> (n+1,0);}

	inline void dfs(int node,int p,int lvl){
		ss[node]=1;int maxi=0;depth[node]=lvl;
		for(int &i:edge[node]) {if(i==p) continue;dfs(i,node,lvl+1);
			par[i]=node;ss[node]+=ss[i];if(maxi<ss[i]) {maxi=ss[i];heavy[node]=i;}
		}
	}
	inline void decompose(int node,int h){
		head[node]=h;pos[node]=gpos++;
		if(heavy[node]) decompose(heavy[node],h);
		for(int &i:edge[node]) {if(i==par[node] || i==heavy[node]) continue;decompose(i,i);}
	}
	inline lli query(int l,int r,struct SegTree& st){lli sum=0;
		while(head[l]!=head[r]){
			if(depth[head[l]]>depth[head[r]]){sum+=st.query(pos[head[l]],pos[l]);l=par[head[l]];}
			else {sum+=st.query(pos[head[r]],pos[r]);r=par[head[r]];}
		}
		if(pos[l]>pos[r]) sum+=st.query(pos[r],pos[l]);
		else sum+=st.query(pos[l],pos[r]);
		return sum;
	}
};


